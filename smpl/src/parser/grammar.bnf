program: [mod-decl]? [item-list]?

mod-decl: MOD NAME SEMI

item-list: [item]+

item: use-decl | fn-decl | struct-decl

use-decl: USE NAME SEMI

fn-decl: FN NAME LPAREN [param-list]? RPAREN [ARROW type-annotation]? block

param-list: param COMMA param-list | param-list [COMMA]?
param: NAME COLON type-annotation

struct-decl: STRUCT NAME "LBRACE [struct-field-list]? RBRACE
struct-field-list: struct-field COMMA struct-field-list | struct-field [COMMA]?

type-annotation: module-path | array-type | fn-type
module-path: NAME [COLONCOLON NAME]+
array-type: LBRACE type-annotation SEMI NUMBER RBRACE
fn-type: FN_T LPAREN [fn-type-param-list]? RPAREN [ARROW type-annotation]?
fn-type-param-list: type-annotation COMMA fn-type-param-list | type-annotation [COMMA]?


block: LBRACE [stmt]* RBRACE

stmt: expr SEMI | expr-stmt

expr: truth-expr

truth-expr: truth-expr [LAND | LOR] strict-eq-expr | strict-eq-expr 

strict-eq-expr: strict-eq-expr [EQ | NEQ] relative-cmp-expr | relative-cmp-expr

relative-cmp-expr: math-expr [LT | LTE | GT | GTE] math-expr | math-expr

math-expr: math-expr [ADD | SUB] factor | factor
factor: factor [MUL | DIV | MOD] uni-expr | uni-expr
uni-expr: [NEG | NOT | REF | DEREF] uni-expr | expr-leaf
expr-leaf: LPAREN expr RPAREN | literal | fn-call | field-access | struct-init | binding

struct-init: module-path LBRACE struct-field-init-list RBRACE | binding LBRACE struct-field-init-list RBRACE
struct-field-init-list: struct-field-init [COMMA struct-field-init-list]? | struct-field-init [COMMA]?
struct-field-init: NAME COLON expr
literal: TRUE | FALSE | NUMBER | STRING

fn-call: module-path LPAREN fn-call-args RPAREN | binding LPAREN fn-call-args RPAREN
fn-call-args: expr [COMMA fn-call-args]? | expr [COMMA]?
field-access: NAME ["." NAME]+

binding: NAME
