/// --------------SMPL Grammar----------------
///
///
/// module -> mod_decl? decl_stmt+
///	mod_decl -> "mod" ident;
/// decl_stmt -> fn_decl | struct_decl | use_decl
///
///	use_decl -> "use" ident ";"
///
/// fn_decl -> "fn" ident "(" [param_list]? ")" ["->" type_annotation]? block
/// param_list -> param ["," param]*
/// param -> ident ":" type_annotation
///
///
/// struct_decl -> "struct" ident "{" struct_field_list "}"
/// struct_field_list -> struct_field "," struct_field_list
///		      -> struct_field ","?
/// struct_field -> ident ":" type_annotation
///
///
/// block -> "{" [stmt]*  "}"
/// stmt -> expr ";" | expr_stmt
///
///
/// expr_stmt -> if_stmt | while_stmt | local_var_decl | assignment
/// if_stmt -> "if" expr block
/// while_stmt -> "while" expr block
/// local_var_decl -> "let" ident ":" type_annotation "=" expr ";"
/// assignment -> path "=" expr ";"
///
///
/// expr -> truth_expr
///
/// truth_expr -> truth_expr ["&&" | "||"] strict_eq_expr | strict_eq_expr
/// strict_eq_expr -> strict_eq_expr ["==" | "!="] relative_cmp_expr | relative_cmp_expr
/// relative_cmp_expr -> math_expr [">" | ">=" | "<" | "<="] math_expr | math_expr
///
/// math_expr -> math_expr ["+" | "-"] factor | factor
/// factor -> factor ["*" | "/" | "%"] uni_expr | uni_expr
///
/// uni_expr -> ["-" | "!" | "&" | "*"] uni_expr | expr_leaf
///
/// expr_leaf -> "(" expr ")"| literal | fn_call | path | struct_init
///
/// struct_init -> "init" type_path "{" struct_field_init_list "}"
/// struct_field_init_list -> struct_field_init "," struct_field_init_list
///		      -> struct_field_init ","?
/// struct_field_init -> ident ":" expr 
/// 
/// literal -> "true" | "false" | [0-9]+[.[0.9]+]? | "[[:ASCII:]]"
///
///
/// fn_call -> ModulePath "(" fn_call_args ")"
/// fn_call_args -> expr ["," expr]*
///
/// ident -> [a-zA-Z_] [a-zA-Z0-9_]*
/// path -> ident ["." ident]*
/// type_path -> ident ["." ident]*

use std::str::FromStr;
use ast::*;
use ascii::*;
use span::Span;

grammar;

/// module -> mod_decl? decl_stmt+
/// mod_decl -> "mod" ident ";"
pub Module: Module = {
	<mod_decl: ("mod" Ident ";")?> <decl: DeclStmt+> => {
		Module(mod_decl.map(|(_, ident, _)| ident), decl)
	}
};

/// decl_stmt -> fn_decl | struct_decl | use_decl
DeclStmt: DeclStmt = {
	<f: FnDecl> => DeclStmt::Function(f),
	<s: StructDecl> => DeclStmt::Struct(s),
	<u: UseDecl> => DeclStmt::Use(u),
	<bf: BuiltinFnDecl> => DeclStmt::BuiltinFunction(bf),
};

UseDecl: AstNode<UseDecl> = {
	<l: @L> "use" <i: Ident> ";" <r: @R> => AstNode::new(UseDecl(i), Span::new(l, r)),
};

/// fn_decl -> "fn" ident "(" [param_list]? ")" ["->" type_annotation]? block
pub BuiltinFnDecl: AstNode<BuiltinFunction> = {
	<l: @L> "builtin" "fn" <name: Ident> "(" <params: FnParameterList?> ")" <return_type: ("->" TypeAnnotation)?> ";" <r: @R> => {
		AstNode::new(BuiltinFunction {
			name: name,
			params: params,
			return_type: return_type.map(|r| r.1),
		}, Span::new(l, r))
	}
};

/// fn_decl -> "fn" ident "(" [param_list]? ")" ["->" type_annotation]? block
pub FnDecl: AstNode<Function> = {
	<l: @L> "fn" <name: Ident> "(" <params: FnParameterList?> ")" <return_type: ("->" TypeAnnotation)?> <b: Block> <r: @R> => {
		AstNode::new(Function {
			name: name,
			params: params,
			return_type: return_type.map(|r| r.1),
			body: b,
		}, Span::new(l, r))
	}
};

/// param_list -> param ["," param]*
FnParameterList: Vec<AstNode<FnParameter>> = {
	<first: FnParameter> <tail: ("," <FnParameter>)*> => {
		let mut v = vec![first];
		v.extend(tail);
		v
	}
};

/// param -> ident ":" type_annotation
FnParameter: AstNode<FnParameter> = {
	<l: @L> <name: Ident> ":"  <param_type: TypeAnnotation> <r: @R> => {
		AstNode::new(FnParameter {
			name: name,
			param_type: param_type,
		}, Span::new(l, r))
	}
};

/// struct_decl -> "struct" ident "{" struct_field_list "}"
pub StructDecl: AstNode<Struct> = {
	<l: @L> "struct" <name: Ident> "{" <fields: StructFieldList?>"}" <r: @R> => {
		AstNode::new(Struct {
			name: name,
			body: StructBody(fields)
		}, Span::new(l, r))
	}
};

/// struct_decl -> "struct" ident "{" struct_field_list "}"
/// struct_field_list -> struct_field "," struct_field_list
///		      -> struct_field ","?
/// struct_field -> ident ":" path
StructFieldList: Vec<StructField> = {
	<first: StructField> "," <tail: StructFieldList> => {
		let mut v = vec![first];
		v.extend(tail);
		v
	},

	<single: StructField> ","? => {
		vec![single]
	}
};

/// struct_field -> ident ":" type_annotation
StructField: StructField = {
	<name: Ident> ":" <field_type: TypeAnnotation> => {
		StructField {
			name: name,
			field_type: field_type,
		}
	}
};

/// stmt -> expr ";" | expr_stmt
pub Stmt: Stmt = {
	<l: @L> <e: Expr> ";" <r: @R> => Stmt::Expr(AstNode::new(e, Span::new(l, r))),
	<l: @L> <e: ExprStmt> <r: @R> => Stmt::ExprStmt(AstNode::new(e, Span::new(l, r))),
};

/// block -> "{" [stmt]*  "}"
Block: AstNode<Block> = {
	<l: @L> <ll: @L> "{" <rr: @R> <s: Stmt*> <lll: @L> "}" <rrr: @R> <r: @R> => {
		AstNode::new(Block(s, Span::new(ll, rr), Span::new(lll, rrr)), Span::new(l, r))
	}
};

/// expr_stmt -> if_stmt | while_stmt | local_var_decl | assignment
pub ExprStmt: ExprStmt = {
	<if_stmt: IfStmt> => ExprStmt::If(if_stmt),
	<while_stmt: WhileStmt> => ExprStmt::While(while_stmt),
	<local_var_decl: LocalVarDecl> => ExprStmt::LocalVarDecl(local_var_decl),
	<assignment: Assignment> => ExprStmt::Assignment(assignment),
	<l: @L> <return_stmt: ReturnStmt> <r: @R> => ExprStmt::Return(Span::new(l, r), return_stmt),
	<l: @L> "continue;" <r: @R> => ExprStmt::Continue(Span::new(l, r)),
	<l: @L> "break;" <r: @R> => ExprStmt::Break(Span::new(l, r)),
};

/// return -> "return" expr ";"
ReturnStmt: Option<Expr> = {
	"return" <e: Expr?> ";" => e,
};

/// local_var_decl -> "let" ident ":" type_annotation  "=" expr ";"
LocalVarDecl: LocalVarDecl = {
	"let" <name: Ident> ":" <var_type: TypeAnnotation> "=" <e: Expr> ";" => {
		LocalVarDecl {
			var_type: var_type,
			var_name: name,
			var_init: e,
		}
	},
};

/// assignment -> path "=" expr ";"
Assignment: Assignment = {
	<ll: @L> <l: @L> <name: Path> <r: @R> "=" <e: Expr> ";" <rr: @R> => {
		Assignment {
			name: AstNode::new(name, Span::new(l, r)),
			value: e,
		}
	}
};

/// if_stmt -> "if" branch ["elif" branch]* ["else" block]?
IfStmt: If = {
	"if" <initial_branch: Branch> <elifs: ("elif" Branch)*> <default_block: ("else" Block)?> => {
		let mut branches = Vec::new();
		branches.push(initial_branch);
		branches.extend(elifs.into_iter().map(|branch| branch.1));

		If {
			branches: branches,
			default_block: default_block.map(|block| block.1)
		}
		
	},
};

/// branch -> expr block
Branch: Branch = {
	<l: @L> <conditional: Expr> <r: @R> <block: Block> => {
		Branch {
			conditional: AstNode::new(conditional, Span::new(l, r)),
			block: block
		}
	}
};

/// while_stmt -> "while" expr block
WhileStmt: While = {
	"while" <l: @L> <conditional: Expr> <r: @R> <block: Block> => {
		While {
			conditional: AstNode::new(conditional, Span::new(l, r)),
			block: block
		}
	},
};

/// expr -> truth_expr
pub Expr: Expr = {	
	<c: TruthExpr> => c,
};

/// truth_expr -> truth_expr ["&&" | "||"] strict_eq_expr | strict_eq_expr
pub TruthExpr: Expr = {
	<l: @L> <lhs: TruthExpr> <op: TruthOp> <rhs: StrictEqExpr> <r: @R> => {
		Expr::Bin(AstNode::new(BinExpr {
			op: op,
			lhs: Box::new(lhs),
			rhs: Box::new(rhs),
		}, Span::new(l, r)))
	},

	<StrictEqExpr>,
};

/// strict_eq_expr -> strict_eq_expr ["==" | "!="] relative_cmp_expr | relative_cmp_expr
StrictEqExpr: Expr = {
	<l: @L> <lhs: StrictEqExpr> <op: StrictEqOp> <rhs: RelativeCmpBranch> <r: @R> => {
		Expr::Bin(AstNode::new(BinExpr {
			op: op,
			lhs: Box::new(lhs),
			rhs: Box::new(rhs),
		}, Span::new(l, r)))
	},

	<RelativeCmpBranch>,
};

/// relative_cmp_expr -> math_expr [">" | ">=" | "<" | "<="] math_expr | math_expr
RelativeCmpBranch: Expr = {
	<l: @L> <lhs: MathExpr> <op: RelativeEqOp> <rhs: MathExpr> <r: @R> => {
		Expr::Bin(AstNode::new(BinExpr {
			op: op,
			lhs: Box::new(lhs),
			rhs: Box::new(rhs),
		}, Span::new(l, r)))
	},

	<MathExpr>,
};

TruthOp: BinOp = {
	"&&" => BinOp::LogicalAnd,
	"||" => BinOp::LogicalOr,
};

RelativeEqOp: BinOp = {
	">" => BinOp::Greater,
	"<" => BinOp::Lesser,
	">=" => BinOp::GreaterEq,
	"<=" => BinOp::LesserEq,
};

StrictEqOp: BinOp = {
	"==" => BinOp::Eq,
	"!=" => BinOp::InEq,
};

/// math_expr -> math_expr ["+" | "-"] factor | factor
pub MathExpr: Expr = {
	<l: @L> <lhs: MathExpr> <op: AddOp> <rhs: Factor> <r: @R> => {
		Expr::Bin(AstNode::new(BinExpr {
			op: op,
			lhs: Box::new(lhs),
			rhs: Box::new(rhs),
		}, Span::new(l, r)))
	},

	Factor,
};

AddOp: BinOp = {
	"+" => BinOp::Add,
	"-" => BinOp::Sub,
};

/// factor -> factor ["*" | "/" | "%"] uni_expr | uni_expr
Factor: Expr = {
	<l: @L> <lhs: Factor> <op: FactorOp> <rhs: UniExpr> <r: @R> => {
		Expr::Bin(AstNode::new(BinExpr {
			op: op,
			lhs: Box::new(lhs),
			rhs: Box::new(rhs),
		}, Span::new(l, r)))
	},

	<UniExpr>
};

FactorOp: BinOp = {
	"*" => BinOp::Mul,
	"/" => BinOp::Div,
	"%" => BinOp::Mod,
};


/// uni_expr -> ["-" | "!" | "&" | "*"] uni_expr | expr_leaf
UniExpr: Expr = {
	<l: @L> <op: UniOp> <u: UniExpr> <r: @R> => Expr::Uni(AstNode::new(UniExpr { op: op, expr: Box::new(u) }, Span::new(l, r))),
	<ExprLeaf>
};

UniOp: UniOp = {
	"-" => UniOp::Negate,
	"!" => UniOp::LogicalInvert,
	"&" => UniOp::Ref,
	"*" => UniOp::Deref,
};

/// expr_leaf -> "(" expr ")"| literal | fn_call | path | struct_init
ExprLeaf: Expr = {
	<ExprPath>,
	<l: @L> <i: Indexing> <r: @R> => Expr::Indexing(AstNode::new(i, Span::new(l, r))),

	<Primary>,
};

ExprPath: Expr = {
	<l: @L> <path: Path> <r: @R> => {
		let mut path = path;
		if path.0.len() == 1 {
			let segment = path.0.pop().unwrap();
			match segment {
				PathSegment::Ident(i) => Expr::Binding(i),
				PathSegment::Indexing(i, e) => {
					let i = Indexing {
						array: Box::new(Expr::Binding(i)),
						indexer: e
					};
					Expr::Indexing(AstNode::new(i, Span::new(l, r)))
				}
			}
		} else {
			Expr::FieldAccess(AstNode::new(path, Span::new(l, r)))
		}
	},

	<l: @L> <p: ModulePath> <r: @R> => Expr::ModAccess(AstNode::new(p, Span::new(l, r))),
};

Primary: Expr = {
	<l: @L> "(" <e: Expr> ")" <r: @R> => e,
	<l: @L> <lit: Literal> <r: @R> => Expr::Literal(AstNode::new(lit, Span::new(l, r))),
	<l: @L> <f: FnCall> <r: @R> => Expr::FnCall(AstNode::new(f, Span::new(l, r))),

	<l: @L> <a: ArrayInit> <r: @R> => Expr::ArrayInit(AstNode::new(a, Span::new(l, r))),

	<l: @L> <struct_init: StructInit> <r: @R> => Expr::StructInit(AstNode::new(struct_init, Span::new(l, r))),
};

Indexing: Indexing = {
	<e: Primary> "[" <i: Expr> "]" => {
		Indexing { 
			array: Box::new(e), 
			indexer: Box::new(i)
		}
	}
};

ArrayInit: ArrayInit = {
	"[" <a: ArrayInitList> "]" => ArrayInit::InitList(a),

	"[" <e: Expr> ";" <n: Number> "]" => {
		let array_size = n.parse::<u64>().unwrap();
		ArrayInit::Value(Box::new(e), array_size)
	}
};

ArrayInitList: Vec<Expr> = {
	<e: Expr> "," <tail: ArrayInitList> => {
		let mut v = vec![e];
		v.extend(tail);
		v 
	},

	<e: Expr> ","? => vec![e],
};

/// struct_init -> "init" type_path "{" struct_field_init_list "}"
StructInit: StructInit = {
	"init" <struct_name: ModuleBinding> "{" <init: StructFieldInitList?> "}" => {
		StructInit {
			struct_name: struct_name,
			field_init: init,
		}
	}
};

/// struct_field_init_list -> struct_field_init "," struct_field_init_list
///		      -> struct_field_init ","?
/// struct_field_init -> ident ":" expr 
StructFieldInitList: Vec<(AstNode<Ident>, Box<Expr>)> = {
	<first: StructFieldInit> "," <tail: StructFieldInitList> => {
		let mut v = vec![first];
		v.extend(tail);
		v
	},

	<single: StructFieldInit> ","? => {
		vec![single]
	},
};

StructFieldInit: (AstNode<Ident>, Box<Expr>) = {
	<name: Ident> ":" <init: Expr> => (name, Box::new(init)),
};

/// fn_call -> ModulePath "(" fn_call_args ")"
FnCall: FnCall = {
	<path: ModuleBinding> "(" <args: FnCallArgs?> ")" => {
		let mut path = path;
		FnCall::new(
			path,
			args,
		)
	}
};

/// fn_call_args -> expr ["," expr]*
FnCallArgs: Vec<Expr> = {
	<first: Expr> <tail: ("," <Expr>)*> => {
		let mut v = vec![first];
		v.extend(tail.into_iter());
		v
	}
};

/// literal -> "true" | "false" | [0-9]+[.[0.9]+]? | "[[:ASCII:]]"
pub Literal: Literal = {
	<number: Number> => {
		if number.contains(".") {
			Literal::Float(number.parse::<f64>().unwrap())
		} else {
			Literal::Int(number.parse::<i64>().unwrap())
		}
	},
	<string: r##"".*""##>  => {
		let mut string = AsciiString::from_str(string).unwrap();
		string.remove(0);
		string.pop();
		Literal::String(string)
	},
	"true" => Literal::Bool(true),
	"false" => Literal::Bool(false), 

};

Number: String = {
	<number: r"[-]?[0-9]+[.[0-9]*]?"> => number.to_string(),
};

/// ident -> [a-zA-Z_] [a-zA-Z0-9_]*
Ident: AstNode<Ident> = {
	<l: @L> <ident: r"[A-Za-z_][_A-Za-z0-9]*"> <r: @R> => { 
		AstNode::new(Ident(AsciiString::from_str(ident).unwrap()), 
						Span::new(l, r))
	}
};

/// path -> ident ["." ident]*
Path: Path = {
	<p: PathSegmentList> => Path(p),
};

PathSegmentList: Vec<PathSegment> = {
	<first: PathSegment> "." <tail: PathSegmentList> => {
		let mut p = tail;
		p.insert(0, first);
		p
	},

	<segment: PathSegment> => vec![segment],
};

PathSegment: PathSegment = {
	<i: Ident> => PathSegment::Ident(i),
	<i: Ident> "[" <e: Expr> "]" => PathSegment::Indexing(i, Box::new(e)),
};

ModuleBinding: ModulePath = {
	<i: Ident> => ModulePath(vec![i]),
	<ModulePath>,
};

/// type_path -> ident ["." ident]*
ModulePath: ModulePath = {
	<first: Ident> <v:("::" <Ident>)+> => {
		let mut p = Vec::new();
		p.push(first);
		p.extend_from_slice(&v);
		ModulePath(p)
	}
};

TypeAnnotation: AstNode<TypeAnnotation> = {
	<l: @L> <p: ModuleBinding> <r: @R> => AstNode::new(TypeAnnotation::Path(p), Span::new(l, r)),
	<l: @L> <a: ArrayType> <r: @R> => AstNode::new(a, Span::new(l, r)),
	<l: @L> <f: FunctionTypeAnnotation> <r: @R> => AstNode::new(f, Span::new(l, r)),
};

FunctionTypeAnnotation: TypeAnnotation = {
	"Fn" "(" <p: FunctionTypeAnnotationParameterList?> ")" <r: ("->" TypeAnnotation)?> => {
		TypeAnnotation::FnType(p, r.map(|(_, t)| Box::new(t)))
	}
};

FunctionTypeAnnotationParameterList: Vec<AstNode<TypeAnnotation>> = {
	<first: TypeAnnotation> <tail: FunctionTypeAnnotationParameterList> => {
		let mut v = vec![first];
		v.extend(tail);
		v
	},

	<t: TypeAnnotation> ","? => vec![t],

	
};

ArrayType: TypeAnnotation = {
	"[" <t: TypeAnnotation> ";" <number: Number> "]" => {
		let number = number.parse::<u64>().unwrap();
		TypeAnnotation::Array(Box::new(t), number)
	}
};
