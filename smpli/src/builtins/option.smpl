mod option;

#[opaque]
struct Option(type T) { }

builtin fn some(type T)(value: T) -> Option(type T);
builtin fn is_some(type T)(value: Option(type T)) -> bool;

builtin fn unwrap(type T)(value: Option(type T)) -> T;
builtin fn expect(type T)(value: Option(type T), msg: String) -> T;

builtin fn none(type T)() -> Option(type T);
builtin fn is_none(type T)(value: Option(type T)) -> bool;

fn map(type T, U)(opt: Option(type T), 
                  mapper: fn(T) -> U) 
    -> Option(type U) {

    let inner = unwrap(type T)(opt);
    let mapped = mapper(inner);

    return some(type U)(mapped);
}
